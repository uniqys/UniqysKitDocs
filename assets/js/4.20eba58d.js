(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{165:function(t,e,a){"use strict";a.r(e);var o=a(0),s=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"blockchain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockchain","aria-hidden":"true"}},[t._v("#")]),t._v(" Blockchain")]),t._v(" "),a("h2",{attrs:{id:"data-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-structure","aria-hidden":"true"}},[t._v("#")]),t._v(" Data Structure")]),t._v(" "),a("p",[t._v("Each block contains the following data.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("height")]),t._v(": Height of the block")]),t._v(" "),a("li",[a("strong",[t._v("timestamp")]),t._v(": Timestamp of when the block was created")]),t._v(" "),a("li",[a("strong",[t._v("lastBlockHash")]),t._v(": Hash of the previous block")]),t._v(" "),a("li",[a("strong",[t._v("transactionRoot")]),t._v(": Merkle root of transactions")]),t._v(" "),a("li",[a("strong",[t._v("lastBlockConsensusRoot")]),t._v(": Merkle root of last block's consensus")]),t._v(" "),a("li",[a("strong",[t._v("nextValidatorSetRoot")]),t._v(": Merkle root of next validator set")]),t._v(" "),a("li",[a("strong",[t._v("appStateHash")]),t._v(": Hash of application state")])]),t._v(" "),a("h2",{attrs:{id:"relations-between-blocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#relations-between-blocks","aria-hidden":"true"}},[t._v("#")]),t._v(" Relations Between Blocks")]),t._v(" "),a("p",[t._v("In Chain Core's blockchain, an arbitrary transaction is guaranteed after two blocks of which the transaction was included, due to the relations between consecutive blocks.")]),t._v(" "),a("p",[t._v("Here, we denote "),a("code",[t._v("Block(N)")]),t._v(" for a block with height "),a("code",[t._v("N")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"transaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction","aria-hidden":"true"}},[t._v("#")]),t._v(" Transaction")]),t._v(" "),a("h4",{attrs:{id:"block-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-n","aria-hidden":"true"}},[t._v("#")]),t._v(" Block(N)")]),t._v(" "),a("p",[t._v("The transaction included in this block will be sent to the application as a request, after approval of the block.")]),t._v(" "),a("h4",{attrs:{id:"block-n-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-n-1","aria-hidden":"true"}},[t._v("#")]),t._v(" Block(N+1)")]),t._v(" "),a("p",[t._v("Transaction approved in "),a("code",[t._v("Block(N)")]),t._v(" will be executed in the application before this block is approved, and its "),a("code",[t._v("appState")]),t._v(" (application state) is included in this block.")]),t._v(" "),a("h3",{attrs:{id:"consensus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consensus","aria-hidden":"true"}},[t._v("#")]),t._v(" Consensus")]),t._v(" "),a("h4",{attrs:{id:"block-n-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-n-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Block(N)")]),t._v(" "),a("p",[t._v("Tne consensus of "),a("code",[t._v("Block(N)")]),t._v(" is taken within this block's validator set.\nWhen the signature of more than 2/3 of total voting power could be accumulated, the block will reach consensus.\nHowever, this signatures will not be included in this "),a("code",[t._v("Block(N)")]),t._v(".\nThis is to include the set of signatures in a block which eventually will be taken consensus.\nWhen there are signatures of more than 2/3 of voting power, it does become a proof of consensus even when the validator set is different.\nHowever, by including the signature in the block, the network will be able to consent on the same validator set.")]),t._v(" "),a("h4",{attrs:{id:"block-n-1-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-n-1-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Block(N+1)")]),t._v(" "),a("p",[a("code",[t._v("Block(N+1)")]),t._v(" has "),a("code",[t._v("lastBlockConsensus")]),t._v(", which is the set of signatures collected for "),a("code",[t._v("Block(N)")]),t._v(".\nAfter the consensus for this "),a("code",[t._v("Block(N+1)")]),t._v(" is taken, it is approved that the network has consented on an identical set of signatures for "),a("code",[t._v("Block(N)")]),t._v(".")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("An arbitrary block is said to be final after the next block's "),a("code",[t._v("lastBlockConsensus")]),t._v(" is included in the blockchain.\nTherefore, the result for execution of transactions included in "),a("code",[t._v("Block(N-1)")]),t._v(" will be included in "),a("code",[t._v("Block(N)")]),t._v(" as "),a("code",[t._v("appState")]),t._v(", and the "),a("code",[t._v("appState")]),t._v(" will be final at "),a("code",[t._v("Block(N+1)")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"validator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#validator","aria-hidden":"true"}},[t._v("#")]),t._v(" Validator")]),t._v(" "),a("h4",{attrs:{id:"block-n-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-n-3","aria-hidden":"true"}},[t._v("#")]),t._v(" Block(N)")]),t._v(" "),a("p",[a("code",[t._v("Block(N)")]),t._v(" holds "),a("code",[t._v("Block(N+1)")]),t._v("'s validator set in "),a("code",[t._v("nextValidatorSet")]),t._v(".\nThis is to make validator set modifiable.")]),t._v(" "),a("h4",{attrs:{id:"block-n-1-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-n-1-3","aria-hidden":"true"}},[t._v("#")]),t._v(" Block(N+1)")]),t._v(" "),a("p",[t._v("Signatures of nodes in "),a("code",[t._v("Block(N)")]),t._v("'s "),a("code",[t._v("nextValidatorSet")]),t._v(" is used to reach consensus of "),a("code",[t._v("Block(N+1)")]),t._v(".")])])}],!1,null,null,null);s.options.__file="blockchain.md";e.default=s.exports}}]);